{
	"info": {
		"_postman_id": "rate-limiter-api-collection",
		"name": "Rate Limiter API Tests",
		"description": "Comprehensive testing collection for Rate Limiter API with authentication and rate limiting features",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "rate-limiter-api"
	},
	"item": [
		{
			"name": "1. Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Health check returns 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains service status\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"healthy\");",
							"    pm.expect(jsonData.service).to.eql(\"rate-limiter-api\");",
							"});",
							"",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Verify API service is running and accessible"
			},
			"response": []
		},
		{
			"name": "2. Create API Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"API key creation returns 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response contains API key\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.api_key).to.exist;",
							"    pm.expect(jsonData.name).to.eql(\"Postman Test Key\");",
							"    ",
							"    // Set environment variable for subsequent requests",
							"    pm.environment.set(\"api_key\", jsonData.api_key);",
							"    pm.environment.set(\"created_api_key\", jsonData.api_key);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Postman Test Key\",\n  \"rate_limit_requests\": 5,\n  \"rate_limit_window_seconds\": 60\n}"
				},
				"url": {
					"raw": "{{base_url}}/admin/api-keys",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"api-keys"
					]
				},
				"description": "Generate new API key for authentication"
			},
			"response": []
		},
		{
			"name": "3. Test Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Authentication returns 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response indicates authenticated status\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"authenticated\");",
							"    pm.expect(jsonData.api_key).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-API-Key",
						"value": "{{api_key}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"status"
					]
				},
				"description": "Verify API key authentication works"
			},
			"response": []
		},
		{
			"name": "4. Check Rate Limit Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Rate limit status returns 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Rate limit headers present\", function () {",
							"    pm.expect(pm.response.headers.get(\"X-RateLimit-Limit\")).to.exist;",
							"    pm.expect(pm.response.headers.get(\"X-RateLimit-Remaining\")).to.exist;",
							"    pm.expect(pm.response.headers.get(\"X-RateLimit-Reset\")).to.exist;",
							"});",
							"",
							"pm.test(\"Rate limit data is valid\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.rate_limit.limit).to.be.a('number');",
							"    pm.expect(jsonData.rate_limit.remaining).to.be.a('number');",
							"    pm.expect(jsonData.rate_limit.allowed).to.be.a('boolean');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-API-Key",
						"value": "{{api_key}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/rate-limit",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"rate-limit"
					]
				},
				"description": "View current rate limit information"
			},
			"response": []
		},
		{
			"name": "5. Test Endpoint (Rate Limiting)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request processed successfully\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains echo message\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Request processed successfully\");",
							"    pm.expect(jsonData.echo).to.exist;",
							"});",
							"",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"// Check rate limit headers",
							"pm.test(\"Rate limit headers present\", function () {",
							"    pm.expect(pm.response.headers.get(\"X-RateLimit-Limit\")).to.exist;",
							"    pm.expect(pm.response.headers.get(\"X-RateLimit-Remaining\")).to.exist;",
							"    pm.expect(pm.response.headers.get(\"X-RateLimit-Reset\")).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-API-Key",
						"value": "{{api_key}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"message\": \"Test message from Postman - {{$randomInt}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/test",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"test"
					]
				},
				"description": "Send requests to test rate limiting behavior"
			},
			"response": []
		},
		{
			"name": "6. Test Rate Limit Exceeded",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Rate limit exceeded returns 429\", function () {",
							"    pm.response.to.have.status(429);",
							"});",
							"",
							"pm.test(\"Error message is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql(\"Rate limit exceeded\");",
							"    pm.expect(jsonData.retry_after).to.be.a('number');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-API-Key",
						"value": "{{api_key}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"message\": \"Rate limit test - should fail\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/test",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"test"
					]
				},
				"description": "Test rate limit exceeded response (run after 5 successful requests)"
			},
			"response": []
		},
		{
			"name": "7. Test Invalid API Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Invalid API key returns 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Error message is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql(\"Invalid API key\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-API-Key",
						"value": "invalid-key-123"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"status"
					]
				},
				"description": "Test authentication failure with invalid API key"
			},
			"response": []
		},
		{
			"name": "8. Test Missing API Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Missing API key returns 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Error message is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql(\"API key required\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"status"
					]
				},
				"description": "Test authentication failure when no API key is provided"
			},
			"response": []
		},
		{
			"name": "9. Test with Sample API Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sample API key works\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response indicates authenticated status\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"authenticated\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-API-Key",
						"value": "hello"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"status"
					]
				},
				"description": "Test with pre-configured sample API key (hello)"
			},
			"response": []
		},
		{
			"name": "10. Deactivate API Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"API key deactivation returns 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Deactivation message is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"API key deactivated successfully\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/admin/api-keys/{{created_api_key}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"api-keys",
						"{{created_api_key}}"
					]
				},
				"description": "Clean up test data by deactivating API key"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set timestamp for unique test data",
					"pm.environment.set(\"timestamp\", new Date().getTime());",
					"pm.environment.set(\"test_id\", pm.info.requestId);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global response time check",
					"pm.test(\"Response time is acceptable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(500);",
					"});",
					"",
					"// Global error handling",
					"if (pm.response.code >= 400) {",
					"    pm.test(\"Error response has proper structure\", function () {",
					"        const jsonData = pm.response.json();",
					"        pm.expect(jsonData.error).to.exist;",
					"        pm.expect(jsonData.message).to.exist;",
					"    });",
					"}",
					"",
					"// Check rate limit headers on every response",
					"pm.test(\"Rate limit headers present\", function () {",
					"    if (pm.response.code === 200 || pm.response.code === 429) {",
					"        pm.expect(pm.response.headers.get(\"X-RateLimit-Limit\")).to.exist;",
					"        pm.expect(pm.response.headers.get(\"X-RateLimit-Remaining\")).to.exist;",
					"        pm.expect(pm.response.headers.get(\"X-RateLimit-Reset\")).to.exist;",
					"    }",
					"});",
					"",
					"// Log rate limit information",
					"if (pm.response.headers.get(\"X-RateLimit-Limit\")) {",
					"    console.log(\"Rate Limit Info:\");",
					"    console.log(\"Limit:\", pm.response.headers.get(\"X-RateLimit-Limit\"));",
					"    console.log(\"Remaining:\", pm.response.headers.get(\"X-RateLimit-Remaining\"));",
					"    console.log(\"Reset:\", pm.response.headers.get(\"X-RateLimit-Reset\"));",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}
